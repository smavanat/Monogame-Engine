/*if (colliders[i].Parent.Velocity != Vector2.Zero)
                {
                    returnObjects.Clear();
                    returnObjects = quadtree.Retrieve(colliders[i].Rectangle);
                    Vector2 oldPos = colliders[i].Parent.Position;
                    colliders[i].Parent.Position = colliders[i].Parent.Position + colliders[i].Parent.Velocity;
                    foreach (Collider collider in returnObjects)
                    {
                        if (collider == colliders[i])
                            continue;
                        else
                            Resolve(colliders[i], collider, oldPos);
                            colliders[i].Parent.Velocity = Vector2.Zero;
                    }
                }*/
/*static void Resolve(Collider a, Collider b, Vector2 oldPos, int depth = 0)
        {
            if (++depth > 9) return; //abort if too deep
            Vector2 diff = (b.Parent.Position - a.Parent.Position);
            float adx = (float)Math.Abs(diff.X);
            float ady = (float)Math.Abs(diff.Y);
            if (adx > ady)
            {
                if (a.Rectangle.Intersects(b.Rectangle))
                    a.Parent.Position = new Vector2(oldPos.X, a.Parent.Position.Y);
                if (a.Rectangle.Intersects(b.Rectangle))
                    a.Parent.Position = new Vector2(a.Parent.Position.X, oldPos.Y);
            }
            else if (adx < ady)
            {
                if (a.Rectangle.Intersects(b.Rectangle))
                    a.Parent.Position = new Vector2(a.Parent.Position.X, oldPos.Y);
                if (a.Rectangle.Intersects(b.Rectangle))
                    a.Parent.Position = new Vector2(oldPos.X, a.Parent.Position.Y);
            }
            Resolve(a, b, oldPos, depth);
        }*/